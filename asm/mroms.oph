; Copyright (C) 2020 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $1000

.alias cli_block $70
.alias rom_number $74
.alias old_rom $75
.alias bank_address $76
.alias file_names $77
.alias roms_read $78
.alias old_rom_overwritten $79
.alias cli_file_start $7a

; Get the address of the command line. This doesn't work for the cassette
; filing system.

lda #1
ldx #cli_block              ; address of the CLI block
ldy #0
jsr $ffda

; Select MMFS and get its ROM number.
ldx #<mmfs_text
ldy #>mmfs_text
jsr $fff7

lda $f4
sta old_rom             ; Also store the currently paged ROM bank.
eor #1                  ; Use the companion ROM to MMFS so that MMFS is only
sta rom_number          ; overwritten if there is more than one ROM.

; Read file names.

lda #0
sta file_names
sta roms_read
sta old_rom_overwritten

read_name_loop:

    ldx file_names          ; Use the file names counter to index the files.
    jsr read_name
    bne ++
        lda file_names
        cmp #1              ; If a ROM has already been loaded then just finish.
        bcc +
            jmp prepare_names
*       jmp exit_usage      ; Exit if no name was read.

*   inc file_names
    lda file_names
    cmp #2
    bcs read_files

    jsr skip_spaces
    cpx #0
        beq prepare_names
    jmp read_name_loop

prepare_names:

    ldx file_names
    cpx #1
    bne read_files

    ; Use the indices for the only file name for both first and second file
    ; names so that there are always two file names for the ROM loading code to
    ; work with, even if only one file is given.
    lda cli_file_start
    sta cli_file_start,x

read_files:

    jsr print_file_name

    ; Store the address of the file name in the file block, using the lowest
    ; bit in the ROM number to reference the file names.
    lda rom_number
    and #1
    tax

    clc
    lda cli_file_start,x
    adc cli_block
    sta file_block
    lda [cli_block + 1]
    adc #0
    sta [file_block + 1]
    clc

    lda #$20
    sta [load_address + 1]

    lda #255                ; Load the file into memory.
    ldx #<file_block
    ldy #>file_block
    jsr $ffdd

    ; Disable interrupts until we have selected the sideways RAM and ROM bank,
    ; and copied the ROM data into sideways RAM.
    sei

    ; Make the corresponding bank of sideways RAM visible.
    lda rom_number
    jsr select_ram

    jsr page_out_high_roms

    lda rom_number
    sta $f4
    sta $fe05

    cmp old_rom             ; Note if the old ROM was overwritten by a new one.
    bne copy_rom

    lda #1
    sta old_rom_overwritten

    copy_rom:

    lda #$00
    sta $80
    lda #$20
    sta $81
    lda #$00
    sta $82
    lda #$80
    sta $83

    ldy #0

    copy:
        lda ($80),y
        sta ($82),y
        iny
        bne copy

        inc $81
        inc $83

        lda $83
        cmp #$c0
        bne copy

    cli

    lda rom_number      ; Select the companion ROM bank for the next file.
    eor #1
    sta rom_number

    inc roms_read
    dec file_names
    bne read_files

finish:

boot_code:

    lda roms_read       ; If one or more ROMs were loaded then boot them.
    cmp #1
    bcs launch_rom

    sei
    lda old_rom         ; Restore the previously paged ROM.
    sta $f4
    sta $fe05
    cli

    rts

launch_rom:

    jsr write_rom_entries

    lda old_rom_overwritten     ; If the old ROM was overwritten then reset
    bne reset                   ; to allow the new one to initialise itself.

autoboot:
    lda #$8f            ; Auto-boot service call
    ldx #3
    ldy #0
    jmp $fff4

reset:
    jmp ($fffc)

file_block:
.byte 0, 0          ; address of name string
load_address:
.byte 0, 0, 0, 0    ; load address
.byte 0, 0, 0, 0    ; execution address
.byte 0, 0, 0, 0    ; length of file
.byte 0, 0, 0, 0    ; end address of file

skip_spaces:

    ldx #0
    skip_spaces_loop:

        lda (cli_block),y
        cmp #32
        bne skip_spaces_end
        iny
        inx
        jmp skip_spaces_loop

    skip_spaces_end:
    rts

print_file_name:

    ldx rom_number
    ldy cli_file_start,x

    ldx #0
*       lda loading,x
        cmp #0
        beq +
        jsr $ffee
        inx
        jmp -

*       lda (cli_block),y
        cmp #33
        bcc +
        jsr $ffee
        iny
        jmp -

*   ldx #[into - loading]
*       lda loading,x
        cmp #0
        beq +
        jsr $ffee
        inx
        jmp -

*   clc
    lda rom_number
    adc #48
    jsr $ffee

    jmp crlf

loading:
.byte "Loading ", 0
into:
.byte " into ", 0
loading_end:

crlf:
    lda #13
    jsr $ffee
    lda #10
    jmp $ffee

page_out_high_roms:

    lda roms_read
    cmp #0
    bcs +

    lda #12
    sta $f4
    sta $fe05

*   rts

select_ram:             ; A=ROM number

    and #1
    bne high_bank

    lda #1
    sta $fcd0
    jmp select_ram_exit

    high_bank:

    lda #1
    sta $fcd1

    select_ram_exit:
    rts

write_rom_entries:

    ; Write the entries for the ROM(s) copied into sideways RAM.

    sei

    ldx old_rom
    lda #0              ; Clear the ROM entry for the ROM paged in when this
    sta $2a0,x          ; file was loaded, assuming it was the filing system.

    lda rom_number      ; After reading one ROM the value was changed to refer
    eor #1              ; to the companion bank, so change it back.
    tax
    ldy roms_read

    write_entries:

        stx $f4             ; Select the ROM bank.
        stx $fe05

        txa                 ; Enable the RAM bank.
        jsr select_ram

        lda $8006           ; Copy the ROM type into the ROM table.
        sta $2a0,x

        txa
        eor #1
        tax

        dey
        cpy #0
        bne write_entries

    cli
    rts

read_name:          ; Entry: X=file index, Y=index into the CLI block
                    ; Exit:  A=terminating character
                    ;        Y=index of the terminating character,
                    ;        Z set if no name

    sty cli_file_start,x

    name_loop:

        lda (cli_block),y
        cmp #32
        beq name_loop_end
        cmp #13
        beq name_loop_end
        iny
        jmp name_loop

    name_loop_end:

    ; Check for a zero-length file name.
    tya
    cmp cli_file_start,x
    rts

exit_usage:

    ldx #0
    exit_usage_loop:
        lda usage,x
        jsr $ffee
        inx
        cpx #[usage_end - usage]
        bne exit_usage_loop

    rts

usage:
.byte "Usage: MROMS <ROM file> [<ROM file>]", 10, 13
.byte "Version 1.0", 10, 13
.byte "Load ROMs into MGC2 sideways RAM.", 10, 13
usage_end:

mmfs_text:
.byte "MMFS", 13
