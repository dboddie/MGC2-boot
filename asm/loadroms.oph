; Copyright (C) 2020 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $1000

.alias cli_block $70
.alias rom_number $74
.alias old_rom $75
.alias cli_file_start $76
.alias bank_address $77
.alias roms_read $78
.alias cli_file_end $79
.alias old_rom_overwritten $7a

; Get the address of the command line. This doesn't work for the cassette
; filing system.

lda #1
ldx #cli_block              ; address of the CLI block
ldy #0
jsr $ffda

; Start parsing the command line arguments.
ldy #0
jsr skip_spaces

; Read the ROM number as a single digit hexadecimal number.
jsr read_hex_number
bcc +
    jmp exit_usage      ; C is set if no number was read

* sta rom_number

lda $f4
sta old_rom             ; Also store the currently paged ROM bank.

; Read file names.

lda #0
sta roms_read
sta old_rom_overwritten

jsr skip_spaces
cpx #0                  ; If no spaces follow the number then exit.
bne read_file_loop
    jmp exit_usage

read_file_loop:

    jsr read_name
    bne ++
        lda roms_read
        cmp #1          ; If a ROM has already been loaded then just finish.
        bcc +
            jmp finish
*       jmp exit_usage  ; Exit if no name was read.

*   jsr print_file_name

    ; Store the address of the file name in the file block.
    clc
    lda cli_file_start
    adc cli_block
    sta file_block
    lda [cli_block + 1]
    adc #0
    sta [file_block + 1]
    clc

    lda #$20
    sta [load_address + 1]

    lda #255                ; Load the file into memory.
    ldx #<file_block
    ldy #>file_block
    jsr $ffdd

    ; Disable interrupts until we have selected the sideways RAM and ROM bank,
    ; and copied the ROM data into sideways RAM.
    sei

    ; Make the corresponding bank of sideways RAM visible.
    lda rom_number
    jsr select_ram

    jsr page_out_high_roms

    lda rom_number
    sta $f4
    sta $fe05

    cmp old_rom             ; Note if the old ROM was overwritten by a new one.
    bne copy_rom

    lda #1
    sta old_rom_overwritten

    copy_rom:

    lda #$00
    sta $80
    lda #$20
    sta $81
    lda #$00
    sta $82
    lda #$80
    sta $83

    ldy #0

    copy:
        lda ($80),y
        sta ($82),y

        inc $80
        bne copy_0
        inc $81

        copy_0:
        inc $82
        bne copy
        inc $83

        lda $83
        cmp #$c0
        bne copy

    cli

    inc roms_read
    lda roms_read
    cmp #2
    bcs finish

    lda rom_number      ; Select the companion ROM bank for the next file.
    eor #1
    sta rom_number

    ldy cli_file_end    ; Restore the index into the command line.
    cpy #13
        beq finish
    jsr skip_spaces
    cpx #0
        beq finish
    jmp read_file_loop

finish:

boot_code:

    lda roms_read       ; If one or more ROMs were loaded then boot them.
    cmp #1
    bcs launch_rom

    sei
    lda old_rom         ; Restore the previously paged ROM.
    sta $f4
    sta $fe05
    cli

    rts

launch_rom:

    jsr write_rom_entries

    lda old_rom_overwritten     ; If the old ROM was overwritten then reset
    bne reset                   ; to allow the new one to initialise itself.

autoboot:
    lda #$8f            ; Auto-boot service call
    ldx #3
    ldy #0
    jmp $fff4

reset:
    jmp ($fffc)

file_block:
.byte 0, 0          ; address of name string
load_address:
.byte 0, 0, 0, 0    ; load address
.byte 0, 0, 0, 0    ; execution address
.byte 0, 0, 0, 0    ; length of file
.byte 0, 0, 0, 0    ; end address of file

read_hex_number:    ; Reads a single digit hexadecimal number
                    ; Entry: Y=current index into the CLI block
                    ; Exit:  Y=the character after the number,
                    ;        C is set if no number was read

    lda (cli_block),y

    cmp #48                     ; < "0" -> exit
    bcc read_hex_number_fail
    cmp #71                     ; > "F" -> exit
    bcs read_hex_number_fail
    cmp #58                     ; <= "9"
    bcc store_rom_number_0_to_9
    cmp #65                     ; >= "A"
    bcs store_rom_number_A_to_F

    read_hex_number_fail:
    sec
    rts

    store_rom_number_A_to_F:
    ; 65 <= byte < 71
    sec
    sbc #7                      ; 58 <= byte < 64

    store_rom_number_0_to_9:    ; 48 <= byte < 64
    sec
    sbc #48                     ; 0 <= byte < 16
    clc

    pha

    iny
    pla
    read_hex_number_exit:
    clc
    rts

skip_spaces:

    ldx #0
    skip_spaces_loop:

        lda (cli_block),y
        cmp #32
        bne skip_spaces_end
        iny
        inx
        jmp skip_spaces_loop

    skip_spaces_end:
    rts

print_file_name:

    ldx #0
    print_loop:
        lda loading,x
        jsr $ffee
        inx
        cpx #[loading_end - loading]
        bne print_loop

    ldy cli_file_start
    *   lda (cli_block),y
        jsr $ffee
        iny
        cmp #33
        bcs -

    jmp crlf

loading:
.byte "Loading "
loading_end:

crlf:
    lda #13
    jsr $ffee
    lda #10
    jmp $ffee

page_out_high_roms:

    lda roms_read
    cmp #0
    bcs +

    lda #12
    sta $f4
    sta $fe05

*   rts

select_ram:             ; A=ROM number

    and #1
    bne high_bank

    lda #1
    sta $fcd0
    jmp select_ram_exit

    high_bank:

    lda #1
    sta $fcd1

    select_ram_exit:
    rts

write_rom_entries:

    ; Write the entries for the ROM(s) copied into sideways RAM.

    sei

    ldx old_rom
    lda #0              ; Clear the ROM entry for the ROM paged in when this
    sta $2a0,x          ; file was loaded, assuming it was the filing system.

    lda rom_number      ; After reading one ROM the value was changed to refer
    eor #1              ; to the companion bank, so change it back.
    tax
    ldy roms_read

    write_entries:

        stx $f4             ; Select the ROM bank.
        stx $fe05

        txa                 ; Enable the RAM bank.
        jsr select_ram

        lda $8006           ; Copy the ROM type into the ROM table.
        sta $2a0,x

        txa
        eor #1
        tax

        dey
        cpy #0
        bne write_entries

    cli
    rts

read_name:          ; Entry: Y=index into the CLI block
                    ; Exit:  A=terminating character
                    ;        Y=index of the terminating character,
                    ;        Z set if no name

    sty cli_file_start

    name_loop:

        lda (cli_block),y
        cmp #32
        beq name_loop_end
        cmp #13
        beq name_loop_end
        iny
        jmp name_loop

    name_loop_end:
    sty cli_file_end
    cpy cli_file_start
    rts

exit_usage:

    ldx #0
    exit_usage_loop:
        lda usage,x
        jsr $ffee
        inx
        cpx #[usage_end - usage]
        bne exit_usage_loop

    rts

usage:
.byte "Usage: LROMS <ROM bank> <ROM file> [<ROM file>]", 10, 13
.byte "Version 1.0", 10, 13
usage_end:
