; Copyright (C) 2020 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $8000
.alias current_paged_rom $f4
.alias current_rom $f5
.alias exported_rom_pointer $f6
.alias exported_rom_pointer_low $f6
.alias exported_rom_pointer_high $f7
.alias OSRDRM $ffb9

rom_start:
.byte 0, 0, 0   ; null language entry
jmp service_entry

; ROM type
.byte $82       ; 6502 code (2), language ($40), service ($80)

copyright_offset:
.byte [copyright_string - rom_start - 1]

; Version
%(version)s

; Title string
%(title)s

; Version string
%(version string)s

copyright_string:
%(copyright)s

service_entry:

    ; Code to call a check for the ROM's star command.
    cmp #4
    beq service_command
    cmp #$0d
    beq init_command
    cmp #$0e
    beq read_byte_command

    service_entry_exit:
    rts

rom_name:
%(rom name)s

init_command:

    pha
    tya
    bmi init_set_pointer
    eor #$0f
    cmp #$10
    bcs exit
    cmp current_paged_rom
    bcc exit

    init_set_pointer:
    jsr reset_pointer

    lda current_paged_rom
    eor #$ff
    and #$0f
    sta current_rom

claim:
    pla
    lda #0
    rts

exit:
    pla
    rts

read_byte_command:
    pha

    lda current_rom
    eor #$ff
    and #$0f
    cmp current_paged_rom
    bne exit

    jsr trigger_check

    ldy #0
    lda (exported_rom_pointer),y
    tay

claim1:
    inc exported_rom_pointer
    bne claim
    inc [exported_rom_pointer + 1]
    jmp claim

service_command:

; Code to check for the ROM's name being used as a star command.

    tya                         ; push Y and X registers onto the stack
    pha
    txa
    pha

    ldx #0

    service_command_rom_loop:

        lda ($f2),y
        cmp #32
        beq service_command_read_delay
        cmp rom_name,x
        bne service_command_not_found
        iny
        inx
        cmp #13
        bne service_command_rom_loop
        beq service_command_default_delay

    service_command_read_delay:
    lda #0
    sta animation_timer
    service_command_read_delay_loop:
        lda ($f2),y
        iny
        cmp #13
        beq service_command_set_delay
        cmp #32
        beq service_command_read_delay_loop
        cmp #48
        bcc service_command_not_found
        cmp #58
        bcs service_command_not_found
        sec
        sbc #48     ; ASCII code - 48 ('0') -> 0-9
        clc
        sta $70     ; new digit

        asl animation_timer ; old total (n) -> n * 2
        lda animation_timer
        asl
        asl                 ; n * 8
        adc animation_timer ; n * 10
        adc $70             ; old total + new digit

        ; If the delay is too large then just use the default delay.
        bcs service_command_default_delay
        sta animation_timer

        bcc service_command_read_delay_loop

    service_command_default_delay:
    lda #initial_animation_timer
    sta animation_timer

    service_command_set_delay:
    lda #21
    ldx #7
    jsr $fff4           ; *FX21,7 (flush sound channel 3)

    lda #$fd
    ldx #0
    ldy #255
    jsr $fff4
    cpx #1              ; power up?
    bne skip_mgc_code

    jsr main_mgc_code

    skip_mgc_code:

    jsr blank_palette

    lda #22
    jsr $ffee
    lda #6          ; MODE 6
    jsr $ffee

    ldx #2
    jsr print_loop

    ldx #2          ; Load the file at index 1 (COPYROM).
    jsr load_file

    jmp $1000

    ; Only for use if we want to exit cleanly:
    ;pla
    ;tax
    ;pla
    ;tay

    ;lda #0
    ;rts

    service_command_not_found:
    pla                         ; pop Y and X registers off the stack
    tax
    pla
    tay
    lda #4                      ; restore A
    rts

reset_pointer:
    lda #<data
    sta exported_rom_pointer
    lda #>data
    sta [exported_rom_pointer + 1]
    rts

trigger_check:

    ; The following check was obtained from
    ; http://mdfs.net/Info/Comp/BBC/SROMs/FastROMFS

    lda $e2                         ; If cataloguing, exit instead of checking
    and #$08                        ; for triggers.
    bne trigger_check_quick_exit

    ; Compare the exported ROM pointer to the triggers.

    txa         ; Save X for later.
    pha

    ldx #after_triggers ; Set X to refer to the address after the trigger array.

    trigger_check_loop:

        dex
        lda triggers,x                  ; Compare the high byte of the ROM
        cmp exported_rom_pointer_high   ; pointer to the current trigger.
        bne trigger_check_next

        dex
        lda triggers,x                  ; Compare the low byte of the ROM
        cmp exported_rom_pointer_low    ; pointer to the current trigger.
        bne trigger_check_base

        ; Compare the file name being searched for with the one in the block
        ; just loaded. If the search file name is just a null byte then go ahead
        ; and decompress the data anyway.
        lda $3d2
        beq trigger_start_decompression

        txa
        pha

        ldx #0
        trigger_check_file_name_loop:
            lda $3b2,x
            sta trigger_offset  ; Store the original char in an unused location.
            cmp #$61
            bcc trigger_check_file_name_check_case  ; < 'a'
            cmp #$7b
            bcs trigger_check_file_name_check_case  ; > 'z'

            and #$df            ; Convert the char to upper case and store it
            sta trigger_offset  ; in a location that isn't being used.

            trigger_check_file_name_check_case:
            lda $3d2,x
            cmp #$61
            bcc trigger_check_file_name_check_char  ; < 'a'
            cmp #$7b
            bcs trigger_check_file_name_check_char  ; > 'z'

            and #$df            ; Convert the char to upper case and store it

            trigger_check_file_name_check_char:
            cmp trigger_offset
            bne trigger_check_file_name_differs
            cmp #0
            beq trigger_check_file_name_matches
            inx
            cpx #11
            bne trigger_check_file_name_loop

        trigger_check_file_name_matches:
        pla
        tax
        jmp trigger_start_decompression

        trigger_check_file_name_differs:
        pla
        tax

        trigger_check_base:
        cpx #0                          ; If not at the base of the array then
        bne trigger_check_loop          ; loop again.
        beq trigger_exit                ; Otherwise exit.

        trigger_check_next:
        dex                             ; Point to the low byte before looping
        bne trigger_check_loop          ; again if not at the base of the array.

    trigger_exit:

    pla         ; Restore X.
    tax
    trigger_check_quick_exit:
    rts

trigger_start_decompression:

    lda src_addresses,x     ; Read the source address into the addresses used
    sta src_low             ; for the source address in the decompression
    inx                     ; routine.
    lda src_addresses,x
    sta src_high
    dex

    lda dest_addresses,x    ; Read the corresponding address into the addresses
    sta dest_low            ; used for the destination and ending addresses.
    inx
    lda dest_addresses,x
    sta dest_high
    dex

    stx trigger_offset      ; The trigger offset is a multiple of 2.

    jsr decompress          ; Call the decompression routine.

    pla                     ; Restore X.
    tax
    rts

.alias src       $90
.alias src_low   $90
.alias src_high  $91

.alias dest      $92
.alias dest_low  $92
.alias dest_high $93

.alias trigger_offset   $94

.alias special      $95
.alias offset       $96
.alias from_low     $97
.alias from_high    $98

decompress: ; src=compressed data, dest=destination start
            ; trigger offset=index into compressed entries

    ldy #0

    ldx trigger_offset
    lda offset_bits_and_count_masks,x
    cmp #$ff                            ; Check for an invalid count mask and
    bne decompress_start                ; decompress the data if not found.

    ; Uncompressed data copy

    decompress_raw_data_loop:
        lda (src),y
        sta (dest),y

        inc src_low
        bne decompress_raw_data_loop0
        inc src_high

        decompress_raw_data_loop0:
        inc dest_low
        bne decompress_raw_data_loop1
        inc dest_high

        decompress_raw_data_loop1:
        ldx trigger_offset
        lda dest_low
        cmp dest_end_addresses,x
        bne decompress_raw_data_loop
        inx
        lda dest_high
        cmp dest_end_addresses,x
        bne decompress_raw_data_loop

        clc
        rts

    decompress_start:

    lda (src),y                     ; data[i]
    sta special

    jsr increment_src               ; i += 1

    decompress_loop:

        lda (src),y                 ; data[i]
        cmp special
        beq handle_special

            sta (dest),y
            jsr increment_src       ; i += 1
            jsr increment_dest
            jmp decompress_next

        handle_special:

            iny                     ; i + 1
            lda (src),y             ; offset
            bne handle_reference

                lda special
                dey                 ; i
                sta (dest),y
                jsr increment_src_2 ; i += 2
                jsr increment_dest
                jmp decompress_next

            handle_reference:

                cmp #$80
                bcs far_reference

                    sta offset  ; the offset is a combined offset-count value

                    ldx trigger_offset
                    and offset_bits_and_count_masks,x

                    inx
                    ldy offset_bits_and_count_masks,x
                    offset_shift_loop:
                        lsr
                        dey
                        bne offset_shift_loop

                    adc #3      ; count = (offset >> offset_bits) + 3
                    tay         ; save the number of bytes to copy

                    lda offset
                    dex
                    ora offset_bits_and_count_masks,x   ; equivalent to ANDing
                    eor offset_bits_and_count_masks,x   ; with NOT count_mask
                    sta offset

                    tya         ; transfer the number of bytes to copy to the
                    tax         ; X register for use in copy_decompressed

                    ldy #0

                    jsr increment_src_2     ; i += 2
                    jsr copy_decompressed
                    jmp decompress_next

                far_reference:

                    and #$7f
                    adc #0      ; C is set, so this adds 1
                    sta offset

                    iny         ; i + 2
                    lda (src),y ; count - 4
                    tax

                    ldy #0

                    jsr increment_src_3     ; i += 3
                    jsr copy_decompressed
                    ldx #4
                    jsr copy_decompressed   ; copy the extra four bytes

        decompress_next:

        lda dest_low
        ldx trigger_offset
        cmp dest_end_addresses,x
        bne decompress_loop
        inx
        lda dest_high
        cmp dest_end_addresses,x
        bne decompress_loop

    clc
    rts

increment_src_3:
    jsr increment_src

increment_src_2:
    jsr increment_src

increment_src:

    inc src_low
    bne increment_src_exit
    inc src_high

    increment_src_exit:
    rts

increment_dest:

    inc dest_low
    bne increment_dest_exit
    inc dest_high

    increment_dest_exit:
    rts

copy_decompressed:  ; X=number of bytes to copy

    cpx #0                      ; Since we don't add 4 to the stored count
    bne copy_decompressed_begin ; value to get the real length, we need to
    rts                         ; handle the case where the stored value is 0.

    copy_decompressed_begin:
 
    sec
    lda dest_low
    sbc offset      ; copy from = dest - offset
    sta from_low
    lda dest_high
    sbc #0
    sta from_high
    clc

    copy_decompressed_loop:

        lda (from_low),y
        sta (dest),y

        inc from_low
        bne copy_decompressed_loop_next
        inc from_high

        copy_decompressed_loop_next:
        jsr increment_dest
        dex
        bne copy_decompressed_loop

    rts

.alias end_scroll_offset 176
.alias title_palette_start [128 + 68]
.alias title_palette_finish [128 + 108]

.alias long_field 60
.alias short_field 59

.alias fields $70
.alias first_field $70
.alias second_field $71

.alias frame_counter $72
.alias text_lines $73
.alias palette_lines $75

.alias initial_scanlines 1
.alias most_scanlines 31
.alias max_scanlines 41
.alias max_palette_lines_value 129
.alias max_palette_lines_min 41
.alias visible_palette_lines_value 100
.alias visible_palette_lines_max 188
.alias initial_scroll_offset 0
.alias initial_palette_offset 27
.alias initial_animation_timer 250

.alias screen_low $76
.alias screen_high $77

.alias scroll_offset $78
.alias max_palette_lines $79
.alias visible_palette_lines $7a
.alias palette_counter $7b
.alias palette_offset $7c
.alias animation_index $7e
.alias animation_value0 $84
.alias animation_value1 $85
.alias animation_timer $86

; Cycle a full range of palette colours (3 lines per colour, 6 colours,
; 2 cycles -> 36 lines, with one extra that doesn't seem to mess up the flow).
;.alias title_palette_start [128 + 68]  ; defined in the mgccode-*.oph files
;.alias title_palette_finish [128 + 105]; defined in the mgccode-*.oph files
.alias palette_fe08 $2e00
.alias palette_fe09 $2f00

main_mgc_code:

    sei

    ldx #0
    jsr show_message    ; Change to MODE 1 and hide the text cursor.

    ldx #0              ; Load the file at index 0 (TITLE).
    jsr load_file

    lda #$c0            ; 0x3780 >> 1 (0x3000 + 3*0x280)
    sta screen_low
    lda #$1b
    sta screen_high

    lda #initial_scanlines      ; Number of MODE 3 scanlines to display
    sta text_lines

    lda #max_palette_lines_value
    sta max_palette_lines
    sta palette_lines

    lda #visible_palette_lines_value
    sta visible_palette_lines

    lda #title_palette_start
    sta animation_index
    tax
    lda palette_fe08,x
    sta animation_value0
    lda palette_fe09,x
    sta animation_value1

    ; Clear the vsync interrupt bit.

    lda $f4
    ora #$10
    sta $fe05

    ; Wait until the vsync bit is cleared.

    lda #$04
    wait0:
    bit $fe00
    bne wait0

    ; Wait until the vsync bit is set, indicating the start of a new frame.

    wait1:
    bit $fe00
    beq wait1

    lda $f4
    ora #$10
    sta $fe05

    calibration:

        jsr calibrate
        stx $70
    
        jsr calibrate
        stx $71

        lda $70
        cmp $71
        beq calibration

    bcs highest_first

    lda #short_field        ; The first value is the lowest, so store a
    sta first_field         ; slightly lower value than the second value in
    lda #long_field         ; the first slot.
    sta second_field
    bcc pre_loop

    highest_first:

    lda #long_field         ; The first value is the highest, so store a
    sta first_field         ; slightly lower value in the second slot.
    lda #short_field
    sta second_field

    pre_loop:

    ldx #0
    stx frame_counter
    lda #initial_scroll_offset  ; Initialise the scroll offset.
    sta scroll_offset
    lda #initial_palette_offset ; Initialise the palette offset.
    sta palette_offset

main_loop:

    lda #$18                ; MODE 3
    sta $fe07
    sta $282

    start:

    ldx frame_counter       ; 3 c
    lda fields,x            ; 4 c
    tax
    jsr wait_scanlines

    ldx text_lines
    jsr wait_scanlines      ; Comment for use with Elkulator.
    ;jsr block_scanlines    ; Uncomment for use with Elkulator.

    lda #$08                ; MODE 1
    sta $fe07
    sta $282

    ldx palette_lines
    cpx #0
    beq show_palette

    jsr block_scanlines

    show_palette:

    ldx palette_offset          ; 3 c

    lda text_lines
    cmp #most_scanlines
    bne no_palette_correction

    dex

    no_palette_correction:

    lda visible_palette_lines   ; Only perform palette optimisation for some
    sta palette_counter         ; scanlines. We need time to do other things.

    palette_loop:
    
        ; Wait for around 24us (48 cycles) per scanline and block by reading RAM.

        ldy #8                      ; 2 c
        palette_loop_delay1:
            dey                     ; 2 c
            bne palette_loop_delay1 ; 3 c

                                    ; 42 c

        lda palette_fe08,x      ; 4 c
        sta $fe08               ; 4 c
        lda palette_fe09,x      ; 4 c
        sta $fe09               ; 4 c

        inx                     ; 2 c

        dec palette_counter     ; 5 c
        bne palette_loop        ; 2 c

    lda #$ff
    sta $fe08
    sta $fe09

    lda scroll_offset               ; Check whether the scrolling has finished.
    cmp #end_scroll_offset
    bcc scroll_down

    jsr animate_title               ; If scrolling has finished then animate
    jmp count_down                  ; the title and count down to exiting.

    scroll_down:
    clc
    adc #2                          ; Scroll down by two scanlines.
    sta scroll_offset

    lda text_lines
    cmp #initial_scanlines
    bne decrease_vcounter

        clc
        lda screen_high
        cmp #$3b
        bne down_one_line
        lda screen_low
        cmp #$00
        bne down_one_line

            lda #$40
            sta screen_low
            lda #$14
            sta screen_high
            jmp store_screen_address

        down_one_line:
        clc                     ; Update the screen start address.
        lda screen_low
        adc #$40
        sta screen_low
        lda screen_high
        adc #$01
        sta screen_high

        store_screen_address:
        lda screen_low
        sta $fe02
        lda screen_high
        sta $fe03

        lda #max_scanlines

        decrease_vcounter:
        sec                 ; Decrease the number of half scanlines to reveal
        sbc #10             ; another MODE 3 character row.

    reset_vcounter:
    sta text_lines

    calculate_remaining_lines:

    lda max_palette_lines           ; Normally the number of lines to blank
    cmp #max_palette_lines_min      ; would be fixed, but we start with a
    beq calculate_remaining_lines2  ; higher than required value to hide the
    sec                             ; MGC title image.
    sbc #2
    sta max_palette_lines

    calculate_remaining_lines2:
    sec                             ; Subtract the number of palette lines
    sbc text_lines                  ; to blank after the MODE 3 -> 1 change.
    sta palette_lines

    lda visible_palette_lines
    cmp #visible_palette_lines_max
    bne add_visible_lines

    inc palette_offset  ; Only increase the palette offset once the full
    inc palette_offset  ; scrolling area is visible. This is designed to
    jmp count_down      ; occur when the top of the visible area has stopped
                        ; moving.
    add_visible_lines:
    adc #2
    sta visible_palette_lines

    count_down:

    lda animation_timer
    cmp #0
    beq end_loop

    next_frame:

    ; Wait for the vsync bit to be set.

    lda #$04                ; 2 c
    wait2:
    bit $fe00               ; 4 c
    beq wait2               ; 3 c

    lda $f4                 ; 3 c
    ora #$10                ; 2 c
    sta $fe05               ; 4 c

    lda frame_counter       ; 3 c
    eor #1                  ; 2 c
    sta frame_counter       ; 3 c

    jmp main_loop

end_loop:

    cli
    rts

calibrate:

    ; Count the number of half scanlines to the end of the display. This will
    ; wrap around in an 8-bit value.

    lda #$04                ; 2 c
    ldx #0                  ; 2 c
    calibration_loop:

        ldy #11             ; 2 c
        delay1:
            dey             ; 2 c
            bne delay1      ; 3 c

        inx                 ; 2 c

        ; Continue until the vsync interrupt bit is set again.

        bit $fe00           ; 4 c
        beq calibration_loop; 3 c
                            ; (11 * 5) + 2 + 9 = 66

    ; Clear the vsync interrupt bit.

    lda $f4
    ora #$10
    sta $fe05

    rts

wait_scanlines:

    wait_loop:

        ; Wait for around 64us (128 cycles) per scanline.

        ldy #23             ; 2 c
        delay0:
            dey             ; 2 c
            bne delay0      ; 3 c

        nop                 ; 2 c
        dex                 ; 2 c
        bne wait_loop       ; 3 c
                            ; (23 * 5) + 2 + 7 = 124
    rts

block_scanlines:

    block_loop:

        ; Wait for around 24us (48 cycles) per scanline and block by reading RAM.

        ldy #8              ; 2 c
        delay2:
            dey             ; 2 c
            bne delay2      ; 3 c

                            ; 42 c
        
        lda $70             ; 3 c
        dex                 ; 2 c
        bne block_loop      ; 3 c

    rts                     ; 6 c

show_message:

    jsr print_loop
    jmp blank_palette

blank_palette:

    lda #$ff                ; Blank the palette.
    sta $fe08
    sta $fe09

    rts

print_loop:
    lda text,x
    jsr $ffee
    inx

    cpx #[text_end - text]
    bne print_loop

    rts

animate_title:

    ldx animation_index

    ldy #10
    animation_title_loop:

    inx
    cpx #title_palette_finish
    bne animate_title_next

    ldx #title_palette_start

    animate_title_next:

    lda palette_fe08,x
    sta $80
    lda palette_fe09,x
    sta $81

    lda animation_value0
    sta palette_fe08,x
    lda animation_value1
    sta palette_fe09,x

    lda $80
    sta animation_value0
    lda $81
    sta animation_value1

    dey
    bne animation_title_loop

    stx animation_index
    dec animation_timer
    rts

text:
.byte 22,1
cursor_off:
.byte 23,1,0,0,0,0,0,0,0,0
text_end:

load_file:  ; Decompress the file at offset X (index X/2).

    pha     ; The following routine pops a value off the stack so push a dummy
            ; value.
    jmp trigger_start_decompression

data:
