; Copyright (C) 2020 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $1000

.alias cli_block $70
.alias rom_number $74
.alias cli_file_start $75
.alias cli_file_end $76
.alias bank_address $77
.alias rom_ram $78

; Get the address of the command line. This doesn't work for the cassette
; filing system.

lda #1
ldx #cli_block              ; address of the CLI block
ldy #0
jsr $ffda

lda #0
sta rom_number
lda #1
sta rom_ram

; Start parsing the command line arguments.
ldy #0
jsr skip_spaces

jsr read_name
bne +
    jmp exit_usage          ; Exit if no name was read.

; Ensure that the file name is terminated in the buffer.
* jsr skip_spaces

; Read the ROM number as a single digit hexadecimal number.
jsr read_hex_number
bcc +
    jmp exit_usage      ; C is set if no number was read

* sta rom_number

lda (cli_block),y
cmp #13
beq load_file           ; If no more arguments

jsr skip_spaces

; Read the ROM-RAM index as a single digit hexadecimal number.
jsr read_hex_number
bcc +
    jmp exit_usage      ; C is set if no number was read
* sta rom_ram

jsr skip_spaces         ; Skip any trailing spaces.

lda (cli_block),y
cmp #13
beq load_file           ; If no more arguments

jmp exit_usage          ; Unexpected trailing characters

load_file:

ldy cli_file_end
sta (cli_block),y

ldx #[loading - strings]
jsr print_string
jsr print_name
lda #10
jsr $ffee

; Store the address of the file name in the file block.
clc
lda cli_file_start
adc cli_block
sta file_block
lda [cli_block + 1]
adc #0
sta [file_block + 1]
clc

; Load the file into memory.
lda #255
ldx #<file_block
ldy #>file_block
jsr $ffdd

; Disable interrupts until we have selected the sideways RAM and ROM bank.
sei

; Disable the ROM entry for the bank.
ldx rom_number
lda #0
sta $2a0,x

; Make the corresponding bank of sideways RAM visible.
lda rom_number
and #1
bne high_bank

lda rom_ram
sta $fcd0
cmp #0
bne select_rom
    sta $fcdc       ; Unlock the low ROM bank.

jmp select_rom

high_bank:

lda rom_ram
sta $fcd1
cmp #0
bne select_rom
    sta $fcde       ; Unlock the high ROM bank.

select_rom:

lda $f4
pha

lda #12
sta $f4
sta $fe05
lda rom_number
sta $f4
sta $fe05

copy_rom:

lda #$00
sta $70
lda #$20
sta $71
lda #$00
sta $72
lda #$80
sta $73

ldy #0

copy:
    lda ($70),y
    sta ($72),y

    inc $70
    bne copy_0
    inc $71

    copy_0:
    inc $72
    bne copy
    inc $73

    lda $73
    cmp #$c0
    bne copy

lda #$82        ; Write an entry into the ROM table.
ldx $f4
sta $2a0,x

pla             ; Restore the previously paged ROM.
sta $f4
sta $fe05

cli
exit:
rts

file_block:
.byte 0, 0          ; address of name string
.byte 0, $20, 0, 0  ; load address
.byte 0, 0, 0, 0    ; execution address
.byte 0, 0, 0, 0    ; length of file
.byte 0, 0, 0, 0    ; end address of file

read_hex_number:    ; Reads a single digit hexadecimal number
                    ; Entry: Y=current index into the CLI block
                    ; Exit:  Y=the character after the number,
                    ;        C is set if no number was read

    lda (cli_block),y

    cmp #48                     ; < "0" -> exit
    bcc read_hex_number_fail
    cmp #71                     ; > "F" -> exit
    bcs read_hex_number_fail
    cmp #58                     ; <= "9"
    bcc store_rom_number_0_to_9
    cmp #65                     ; >= "A"
    bcs store_rom_number_A_to_F

    read_hex_number_fail:
    sec
    rts

    store_rom_number_A_to_F:
    ; 65 <= byte < 71
    sec
    sbc #7                      ; 58 <= byte < 64

    store_rom_number_0_to_9:    ; 48 <= byte < 64
    sec
    sbc #48                     ; 0 <= byte < 16
    clc

    pha

    iny
    pla
    read_hex_number_exit:
    clc
    rts

skip_spaces:

    ldx #0
    skip_spaces_loop:

        lda (cli_block),y
        cmp #32
        bne skip_spaces_end
        iny
        inx
        jmp skip_spaces_loop

    skip_spaces_end:
    rts

read_name:          ; Entry: Y=index into the CLI block
                    ; Exit:  A=terminating character
                    ;        Y=index of the terminating character,
                    ;        Z set if no name

    sty cli_file_start

    name_loop:

        lda (cli_block),y
        cmp #32
        beq name_loop_end
        cmp #13
        beq name_loop_end
        iny
        jmp name_loop

    name_loop_end:
    sty cli_file_end
    cpy cli_file_start
    rts

exit_usage:

    ldx #0
    exit_usage_loop:
        lda usage,x
        jsr $ffee
        inx
        cpx #[usage_end - usage]
        bne exit_usage_loop

    rts

usage:
.byte "Usage: LROM <name> <ROM bank> [0|1]", 10, 13
.byte "Version 1.0", 10, 13
usage_end:

print_name:

    ldy cli_file_start
    *   lda (cli_block),y
        jsr $ffee
        iny
        cmp #13
        bne -

    rts

print_string:   ; X=index into the strings below

    print_string_loop:
        lda strings,x
        cmp #0
        beq +
        jsr $ffee
        inx
        jmp print_string_loop

*   rts

strings:
loading:
.byte "Loading ", 0
crlf:
.byte 10, 13, 0
