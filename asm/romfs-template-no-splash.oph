; Copyright (C) 2020 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $8000
.alias current_paged_rom $f4
.alias current_rom $f5
.alias exported_rom_pointer $f6
.alias exported_rom_pointer_low $f6
.alias exported_rom_pointer_high $f7
.alias OSRDRM $ffb9

rom_start:
.byte 0, 0, 0   ; null language entry
jmp service_entry

; ROM type
.byte $82       ; 6502 code (2), language ($40), service ($80)

copyright_offset:
.byte [copyright_string - rom_start - 1]

; Version
%(version)s

; Title string
%(title)s

; Version string
%(version string)s

copyright_string:
%(copyright)s

service_entry:

    ; Code to call a check for the ROM's star command.
    cmp #4
    beq service_command
    cmp #9
    beq service_help
    cmp #$0d
    beq init_command
    cmp #$0e
    beq read_byte_command

    service_entry_exit:
    rts

pre_rom_name:
.byte 10
rom_name:
%(rom name)s
.byte 10
rom_name_end:

init_command:

    pha
    tya
    bmi init_set_pointer
    eor #$0f
    cmp #$10
    bcs exit
    cmp current_paged_rom
    bcc exit

    init_set_pointer:
    jsr reset_pointer

    lda current_paged_rom
    eor #$ff
    and #$0f
    sta current_rom

claim:
    pla
    lda #0
    rts

exit:
    pla
    rts

read_byte_command:
    pha

    lda current_rom
    eor #$ff
    and #$0f
    cmp current_paged_rom
    bne exit

    jsr trigger_check

    ldy #0
    lda (exported_rom_pointer),y
    tay

claim1:
    inc exported_rom_pointer
    bne claim
    inc [exported_rom_pointer + 1]
    jmp claim

service_help:

    txa
    pha

    lda ($f2),y
    cmp #13
    bne service_help_not_claimed

    ldx #0
    service_help_loop0:
        lda pre_rom_name,x
        jsr $ffee
        inx
        cpx #[rom_name_end - pre_rom_name]
        bne service_help_loop0

    pla
    tax
    lda #0
    rts

service_help_not_claimed:

    pla
    tax
    lda #9
    rts

service_command:

; Code to check for the ROM's name being used as a star command.

    tya                         ; push Y and X registers onto the stack
    pha
    txa
    pha

    ldx #0

    service_command_rom_loop:

        lda ($f2),y
        cmp #32
        beq service_command_run
        cmp rom_name,x
        bne service_command_not_found
        iny
        inx
        cmp #13
        bne service_command_rom_loop

    service_command_run:

    ldx #0          ; Load the file at index 0 (COPYROM).
    jsr load_file

    pla
    tax
    pla
    tay

    jmp $1000

    ; Only for use if we want to exit cleanly:
    ;lda #0
    ;rts

    service_command_not_found:
    pla                         ; pop Y and X registers off the stack
    tax
    pla
    tay
    lda #4                      ; restore A
    rts

reset_pointer:
    lda #<data
    sta exported_rom_pointer
    lda #>data
    sta [exported_rom_pointer + 1]
    rts

trigger_check:

    ; The following check was obtained from
    ; http://mdfs.net/Info/Comp/BBC/SROMs/FastROMFS

    lda $e2                         ; If cataloguing, exit instead of checking
    and #$08                        ; for triggers.
    bne trigger_check_quick_exit

    ; Compare the exported ROM pointer to the triggers.

    txa         ; Save X for later.
    pha

    ldx #after_triggers ; Set X to refer to the address after the trigger array.

    trigger_check_loop:

        dex
        lda triggers,x                  ; Compare the high byte of the ROM
        cmp exported_rom_pointer_high   ; pointer to the current trigger.
        bne trigger_check_next

        dex
        lda triggers,x                  ; Compare the low byte of the ROM
        cmp exported_rom_pointer_low    ; pointer to the current trigger.
        bne trigger_check_base

        ; Compare the file name being searched for with the one in the block
        ; just loaded. If the search file name is just a null byte then go ahead
        ; and decompress the data anyway.
        lda $3d2
        beq trigger_start_decompression

        txa
        pha

        ldx #0
        trigger_check_file_name_loop:
            lda $3b2,x
            sta trigger_offset  ; Store the original char in an unused location.
            cmp #$61
            bcc trigger_check_file_name_check_case  ; < 'a'
            cmp #$7b
            bcs trigger_check_file_name_check_case  ; > 'z'

            and #$df            ; Convert the char to upper case and store it
            sta trigger_offset  ; in a location that isn't being used.

            trigger_check_file_name_check_case:
            lda $3d2,x
            cmp #$61
            bcc trigger_check_file_name_check_char  ; < 'a'
            cmp #$7b
            bcs trigger_check_file_name_check_char  ; > 'z'

            and #$df            ; Convert the char to upper case and store it

            trigger_check_file_name_check_char:
            cmp trigger_offset
            bne trigger_check_file_name_differs
            cmp #0
            beq trigger_check_file_name_matches
            inx
            cpx #11
            bne trigger_check_file_name_loop

        trigger_check_file_name_matches:
        pla
        tax
        jmp trigger_start_decompression

        trigger_check_file_name_differs:
        pla
        tax

        trigger_check_base:
        cpx #0                          ; If not at the base of the array then
        bne trigger_check_loop          ; loop again.
        beq trigger_exit                ; Otherwise exit.

        trigger_check_next:
        dex                             ; Point to the low byte before looping
        bne trigger_check_loop          ; again if not at the base of the array.

    trigger_exit:

    pla         ; Restore X.
    tax
    trigger_check_quick_exit:
    rts

trigger_start_decompression:

    lda src_addresses,x     ; Read the source address into the addresses used
    sta src_low             ; for the source address in the decompression
    inx                     ; routine.
    lda src_addresses,x
    sta src_high
    dex

    lda dest_addresses,x    ; Read the corresponding address into the addresses
    sta dest_low            ; used for the destination and ending addresses.
    inx
    lda dest_addresses,x
    sta dest_high
    dex

    stx trigger_offset      ; The trigger offset is a multiple of 2.

    jsr decompress          ; Call the decompression routine.

    pla                     ; Restore X.
    tax
    rts

.alias src       $90
.alias src_low   $90
.alias src_high  $91

.alias dest      $92
.alias dest_low  $92
.alias dest_high $93

.alias trigger_offset   $94

.alias special      $95
.alias offset       $96
.alias from_low     $97
.alias from_high    $98

decompress: ; src=compressed data, dest=destination start
            ; trigger offset=index into compressed entries

    ldy #0

    ldx trigger_offset
    lda offset_bits_and_count_masks,x
    cmp #$ff                            ; Check for an invalid count mask and
    bne decompress_start                ; decompress the data if not found.

    ; Uncompressed data copy

    decompress_raw_data_loop:
        lda (src),y
        sta (dest),y

        inc src_low
        bne decompress_raw_data_loop0
        inc src_high

        decompress_raw_data_loop0:
        inc dest_low
        bne decompress_raw_data_loop1
        inc dest_high

        decompress_raw_data_loop1:
        ldx trigger_offset
        lda dest_low
        cmp dest_end_addresses,x
        bne decompress_raw_data_loop
        inx
        lda dest_high
        cmp dest_end_addresses,x
        bne decompress_raw_data_loop

        clc
        rts

    decompress_start:

    lda (src),y                     ; data[i]
    sta special

    jsr increment_src               ; i += 1

    decompress_loop:

        lda (src),y                 ; data[i]
        cmp special
        beq handle_special

            sta (dest),y
            jsr increment_src       ; i += 1
            jsr increment_dest
            jmp decompress_next

        handle_special:

            iny                     ; i + 1
            lda (src),y             ; offset
            bne handle_reference

                lda special
                dey                 ; i
                sta (dest),y
                jsr increment_src_2 ; i += 2
                jsr increment_dest
                jmp decompress_next

            handle_reference:

                cmp #$80
                bcs far_reference

                    sta offset  ; the offset is a combined offset-count value

                    ldx trigger_offset
                    and offset_bits_and_count_masks,x

                    inx
                    ldy offset_bits_and_count_masks,x
                    offset_shift_loop:
                        lsr
                        dey
                        bne offset_shift_loop

                    adc #3      ; count = (offset >> offset_bits) + 3
                    tay         ; save the number of bytes to copy

                    lda offset
                    dex
                    ora offset_bits_and_count_masks,x   ; equivalent to ANDing
                    eor offset_bits_and_count_masks,x   ; with NOT count_mask
                    sta offset

                    tya         ; transfer the number of bytes to copy to the
                    tax         ; X register for use in copy_decompressed

                    ldy #0

                    jsr increment_src_2     ; i += 2
                    jsr copy_decompressed
                    jmp decompress_next

                far_reference:

                    and #$7f
                    adc #0      ; C is set, so this adds 1
                    sta offset

                    iny         ; i + 2
                    lda (src),y ; count - 4
                    tax

                    ldy #0

                    jsr increment_src_3     ; i += 3
                    jsr copy_decompressed
                    ldx #4
                    jsr copy_decompressed   ; copy the extra four bytes

        decompress_next:

        lda dest_low
        ldx trigger_offset
        cmp dest_end_addresses,x
        bne decompress_loop
        inx
        lda dest_high
        cmp dest_end_addresses,x
        bne decompress_loop

    clc
    rts

increment_src_3:
    jsr increment_src

increment_src_2:
    jsr increment_src

increment_src:

    inc src_low
    bne increment_src_exit
    inc src_high

    increment_src_exit:
    rts

increment_dest:

    inc dest_low
    bne increment_dest_exit
    inc dest_high

    increment_dest_exit:
    rts

copy_decompressed:  ; X=number of bytes to copy

    cpx #0                      ; Since we don't add 4 to the stored count
    bne copy_decompressed_begin ; value to get the real length, we need to
    rts                         ; handle the case where the stored value is 0.

    copy_decompressed_begin:
 
    sec
    lda dest_low
    sbc offset      ; copy from = dest - offset
    sta from_low
    lda dest_high
    sbc #0
    sta from_high
    clc

    copy_decompressed_loop:

        lda (from_low),y
        sta (dest),y

        inc from_low
        bne copy_decompressed_loop_next
        inc from_high

        copy_decompressed_loop_next:
        jsr increment_dest
        dex
        bne copy_decompressed_loop

    rts

load_file:  ; Decompress the file at offset X (index X/2).

    pha     ; The following routine pops a value off the stack so push a dummy
            ; value.
    jmp trigger_start_decompression

data:
