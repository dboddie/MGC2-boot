; Copyright (C) 2020 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $1000

lda #0
ldx #1
jsr $fff4
cpx #0
bne load_master

; Electron

sei

lda #1
sta $fcd1   ; Enable RAM in the higher priority slot.

lda $f4
sta $70     ; Store the ROM number/bank to help select the accompanying RAM.

lda #12
sta $f4
sta $fe05
lda $70
eor #1      ; Select the adjacent bank to the ROM bank in the pair of banks
            ; exposed by the cartridge.
sta $f4
sta $fe05

jsr copy_mmfs

lda #$82    ; Write an entry into the ROM table.
ldx $f4
sta $2a0,x

jmp boot_code

load_master:

; TODO: Use SRLOAD or page in the sideways RAM.

brk
jsr copy_mmfs
jmp boot_code

; Common copying routine

copy_mmfs:

    lda #>data
    sta $71
    lda #<data
    cmp #0
    beq +
        inc $71
        lda #0      ; Align the pointer with the start of the following page.
    sta $70

*   lda #0
    sta $72
    lda #$80
    sta $73

    ldy #0

    copy:
        lda ($70),y
        sta ($72),y
        iny
        bne copy

        inc $71
        inc $73

        lda $73
        cmp #$c0
        bne copy

    cli
    rts

boot_code:

; This works and is a reasonable way to find MMFS, though it can also find DFS.
;lda #$8f        ; service call
;ldx #$12        ; initialise filing system
;ldy #$04        ; look for DFS
;jsr $fff4

; This works but can lead to BASIC errors on or after file system initialisation.
;lda #$8f        ; service call
;ldx #$03        ; auto-boot
;ldy #$00        ; look for !BOOT
;jmp $fff4

; This works but leaves the auto-boot on Break effect set for subsequent Breaks.
;lda #255
;ldy #$f7        ; Clear bit 3 (cause an auto-boot)
;ldx #0
;jsr $fff4
;jmp ($fffc)

; This works but is also persistent.
;ldx #<key10_text
;ldy #>key10_text
;jsr $fff7       ; (OSCLI - KEY10 <command>|M)
;jmp ($fffc)

;key10_text:
;.byte "KEY10 ", "*DBOOT 0", "|M", 13

; This works but is perhaps a bit overengineered.
lda #$8a
ldx #0          ; (keyboard buffer)
ldy #$89        ; (fn key 9)
jsr $fff4       ; (OSBYTE 8a - insert character into buffer)
ldx #<key9_text
ldy #>key9_text
jsr $fff7       ; (OSCLI - KEY9 <command>|M)
ldx #<basic_text
ldy #>basic_text
jmp $fff7       ; (OSCLI - BASIC)

basic_text:
.byte "BASIC", 13
key9_text:
.byte "KEY9 ", "*MMFS", "|M", "*DBOOT 0", "|M", 13

; MMFS ROM data is appended after this label:

data:

; There may be some padding to align the data with the following page.
